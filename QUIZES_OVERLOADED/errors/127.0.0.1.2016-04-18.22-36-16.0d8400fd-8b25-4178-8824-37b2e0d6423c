(dp1
S'output'
p2
S"<class 'sqlite3.IntegrityError'> FOREIGN KEY constraint failed"
p3
sS'layer'
p4
S'/home/simran/web2py/applications/QUIZES_OVERLOADED/controllers/appadmin.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# ##########################################################\n# ## make sure administrator is on localhost\n# ###########################################################\n\nimport os\nimport socket\nimport datetime\nimport copy\nimport gluon.contenttype\nimport gluon.fileutils\n\ntry:\n    import pygraphviz as pgv\nexcept ImportError:\n    pgv = None\n\nis_gae = request.env.web2py_runtime_gae or False\n\n# ## critical --- make a copy of the environment\n\nglobal_env = copy.copy(globals())\nglobal_env[\'datetime\'] = datetime\n\nhttp_host = request.env.http_host.split(\':\')[0]\nremote_addr = request.env.remote_addr\ntry:\n    hosts = (http_host, socket.gethostname(),\n             socket.gethostbyname(http_host),\n             \'::1\', \'127.0.0.1\', \'::ffff:127.0.0.1\')\nexcept:\n    hosts = (http_host, )\n\nif request.is_https:\n    session.secure()\nelif (remote_addr not in hosts) and (remote_addr != "127.0.0.1") and \\\n    (request.function != \'manage\'):\n    raise HTTP(200, T(\'appadmin is disabled because insecure channel\'))\n\nif request.function == \'manage\':\n    if not \'auth\' in globals() or not request.args:\n        redirect(URL(request.controller, \'index\'))\n    manager_action = auth.settings.manager_actions.get(request.args(0), None)\n    if manager_action is None and request.args(0) == \'auth\':\n        manager_action = dict(role=auth.settings.auth_manager_role,\n                              heading=T(\'Manage Access Control\'),\n                              tables=[auth.table_user(),\n                                      auth.table_group(),\n                                      auth.table_permission()])\n    manager_role = manager_action.get(\'role\', None) if manager_action else None\n    if not (gluon.fileutils.check_credentials(request) or auth.has_membership(manager_role)):\n        raise HTTP(403, "Not authorized")\n    menu = False\nelif (request.application == \'admin\' and not session.authorized) or \\\n        (request.application != \'admin\' and not gluon.fileutils.check_credentials(request)):\n    redirect(URL(\'admin\', \'default\', \'index\',\n                 vars=dict(send=URL(args=request.args, vars=request.vars))))\nelse:\n    response.subtitle = T(\'Database Administration (appadmin)\')\n    menu = True\n\nignore_rw = True\nresponse.view = \'appadmin.html\'\nif menu:\n    response.menu = [[T(\'design\'), False, URL(\'admin\', \'default\', \'design\',\n                 args=[request.application])], [T(\'db\'), False,\n                 URL(\'index\')], [T(\'state\'), False,\n                 URL(\'state\')], [T(\'cache\'), False,\n                 URL(\'ccache\')]]\n\n# ##########################################################\n# ## auxiliary functions\n# ###########################################################\n\nif False and request.tickets_db:\n    from gluon.restricted import TicketStorage\n    ts = TicketStorage()\n    ts._get_table(request.tickets_db, ts.tablename, request.application)\n\ndef get_databases(request):\n    dbs = {}\n    for (key, value) in global_env.items():\n        try:\n            cond = isinstance(value, GQLDB)\n        except:\n            cond = isinstance(value, SQLDB)\n        if cond:\n            dbs[key] = value\n    return dbs\n\ndatabases = get_databases(None)\n\ndef eval_in_global_env(text):\n    exec (\'_ret=%s\' % text, {}, global_env)\n    return global_env[\'_ret\']\n\n\ndef get_database(request):\n    if request.args and request.args[0] in databases:\n        return eval_in_global_env(request.args[0])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(\'index\'))\n\ndef get_table(request):\n    db = get_database(request)\n    if len(request.args) > 1 and request.args[1] in db.tables:\n        return (db, request.args[1])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(\'index\'))\n\n\ndef get_query(request):\n    try:\n        return eval_in_global_env(request.vars.query)\n    except Exception:\n        return None\n\n\ndef query_by_table_type(tablename, db, request=request):\n    keyed = hasattr(db[tablename], \'_primarykey\')\n    if keyed:\n        firstkey = db[tablename][db[tablename]._primarykey[0]]\n        cond = \'>0\'\n        if firstkey.type in [\'string\', \'text\']:\n            cond = \'!=""\'\n        qry = \'%s.%s.%s%s\' % (\n            request.args[0], request.args[1], firstkey.name, cond)\n    else:\n        qry = \'%s.%s.id>0\' % tuple(request.args[:2])\n    return qry\n\n\n# ##########################################################\n# ## list all databases and tables\n# ###########################################################\ndef index():\n    return dict(databases=databases)\n\n\n# ##########################################################\n# ## insert a new record\n# ###########################################################\n\n\ndef insert():\n    (db, table) = get_table(request)\n    form = SQLFORM(db[table], ignore_rw=ignore_rw)\n    if form.accepts(request.vars, session):\n        response.flash = T(\'new record inserted\')\n    return dict(form=form, table=db[table])\n\n\n# ##########################################################\n# ## list all records in table and insert new record\n# ###########################################################\n\n\ndef download():\n    import os\n    db = get_database(request)\n    return response.download(request, db)\n\n\ndef csv():\n    import gluon.contenttype\n    response.headers[\'Content-Type\'] = \\\n        gluon.contenttype.contenttype(\'.csv\')\n    db = get_database(request)\n    query = get_query(request)\n    if not query:\n        return None\n    response.headers[\'Content-disposition\'] = \'attachment; filename=%s_%s.csv\'\\\n        % tuple(request.vars.query.split(\'.\')[:2])\n    return str(db(query, ignore_common_filters=True).select())\n\n\ndef import_csv(table, file):\n    table.import_from_csv_file(file)\n\n\ndef select():\n    import re\n    db = get_database(request)\n    dbname = request.args[0]\n    try:\n        is_imap = db._uri.startswith("imap://")\n    except (KeyError, AttributeError, TypeError):\n        is_imap = False\n    regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>\\d+)\')\n    if len(request.args) > 1 and hasattr(db[request.args[1]], \'_primarykey\'):\n        regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>.+)\')\n    if request.vars.query:\n        match = regex.match(request.vars.query)\n        if match:\n            request.vars.query = \'%s.%s.%s==%s\' % (request.args[0],\n                                                   match.group(\'table\'), match.group(\'field\'),\n                                                   match.group(\'value\'))\n    else:\n        request.vars.query = session.last_query\n    query = get_query(request)\n    if request.vars.start:\n        start = int(request.vars.start)\n    else:\n        start = 0\n    nrows = 0\n\n    step = 100\n    fields = []\n\n    if is_imap:\n        step = 3\n \n    stop = start + step\n\n    table = None\n    rows = []\n    orderby = request.vars.orderby\n    if orderby:\n        orderby = dbname + \'.\' + orderby\n        if orderby == session.last_orderby:\n            if orderby[0] == \'~\':\n                orderby = orderby[1:]\n            else:\n                orderby = \'~\' + orderby\n    session.last_orderby = orderby\n    session.last_query = request.vars.query\n    form = FORM(TABLE(TR(T(\'Query:\'), \'\', INPUT(_style=\'width:400px\',\n                _name=\'query\', _value=request.vars.query or \'\',\n                requires=IS_NOT_EMPTY(\n                    error_message=T("Cannot be empty")))), TR(T(\'Update:\'),\n                INPUT(_name=\'update_check\', _type=\'checkbox\',\n                value=False), INPUT(_style=\'width:400px\',\n                _name=\'update_fields\', _value=request.vars.update_fields\n                                    or \'\')), TR(T(\'Delete:\'), INPUT(_name=\'delete_check\',\n                _class=\'delete\', _type=\'checkbox\', value=False), \'\'),\n                TR(\'\', \'\', INPUT(_type=\'submit\', _value=T(\'submit\')))),\n                _action=URL(r=request, args=request.args))\n\n    tb = None\n    if form.accepts(request.vars, formname=None):\n        regex = re.compile(request.args[0] + \'\\.(?P<table>\\w+)\\..+\')\n        match = regex.match(form.vars.query.strip())\n        if match:\n            table = match.group(\'table\')\n        try:\n            nrows = db(query, ignore_common_filters=True).count()\n            if form.vars.update_check and form.vars.update_fields:\n                db(query, ignore_common_filters=True).update(\n                    **eval_in_global_env(\'dict(%s)\' % form.vars.update_fields))\n                response.flash = T(\'%s %%{row} updated\', nrows)\n            elif form.vars.delete_check:\n                db(query, ignore_common_filters=True).delete()\n                response.flash = T(\'%s %%{row} deleted\', nrows)\n            nrows = db(query, ignore_common_filters=True).count()\n\n            if is_imap:\n                fields = [db[table][name] for name in\n                    ("id", "uid", "created", "to",\n                     "sender", "subject")]\n            if orderby:\n                rows = db(query, ignore_common_filters=True).select(\n                              *fields, limitby=(start, stop),\n                              orderby=eval_in_global_env(orderby))\n            else:\n                rows = db(query, ignore_common_filters=True).select(\n                    *fields, limitby=(start, stop))\n        except Exception, e:\n            import traceback\n            tb = traceback.format_exc()\n            (rows, nrows) = ([], 0)\n            response.flash = DIV(T(\'Invalid Query\'), PRE(str(e)))\n    # begin handle upload csv\n    csv_table = table or request.vars.table\n    if csv_table:\n        formcsv = FORM(str(T(\'or import from csv file\')) + " ",\n                       INPUT(_type=\'file\', _name=\'csvfile\'),\n                       INPUT(_type=\'hidden\', _value=csv_table, _name=\'table\'),\n                       INPUT(_type=\'submit\', _value=T(\'import\')))\n    else:\n        formcsv = None\n    if formcsv and formcsv.process().accepted:\n        try:\n            import_csv(db[request.vars.table],\n                       request.vars.csvfile.file)\n            response.flash = T(\'data uploaded\')\n        except Exception, e:\n            response.flash = DIV(T(\'unable to parse csv file\'), PRE(str(e)))\n    # end handle upload csv\n\n    return dict(\n        form=form,\n        table=table,\n        start=start,\n        stop=stop,\n        step=step,\n        nrows=nrows,\n        rows=rows,\n        query=request.vars.query,\n        formcsv=formcsv,\n        tb=tb\n    )\n\n\n# ##########################################################\n# ## edit delete one record\n# ###########################################################\n\n\ndef update():\n    (db, table) = get_table(request)\n    keyed = hasattr(db[table], \'_primarykey\')\n    record = None\n    db[table]._common_filter = None\n    if keyed:\n        key = [f for f in request.vars if f in db[table]._primarykey]\n        if key:\n            record = db(db[table][key[0]] == request.vars[key[\n                        0]]).select().first()\n    else:\n        record = db(db[table].id == request.args(\n            2)).select().first()\n\n    if not record:\n        qry = query_by_table_type(table, db)\n        session.flash = T(\'record does not exist\')\n        redirect(URL(\'select\', args=request.args[:1],\n                     vars=dict(query=qry)))\n\n    if keyed:\n        for k in db[table]._primarykey:\n            db[table][k].writable = False\n\n    form = SQLFORM(\n        db[table], record, deletable=True, delete_label=T(\'Check to delete\'),\n        ignore_rw=ignore_rw and not keyed,\n        linkto=URL(\'select\',\n                   args=request.args[:1]), upload=URL(r=request,\n                                                      f=\'download\', args=request.args[:1]))\n\n    if form.accepts(request.vars, session):\n        session.flash = T(\'done!\')\n        qry = query_by_table_type(table, db)\n        redirect(URL(\'select\', args=request.args[:1],\n                 vars=dict(query=qry)))\n    return dict(form=form, table=db[table])\n\n\n# ##########################################################\n# ## get global variables\n# ###########################################################\n\n\ndef state():\n    return dict()\n\n\ndef ccache():\n    if is_gae:\n        form = FORM(\n            P(TAG.BUTTON(T("Clear CACHE?"), _type="submit", _name="yes", _value="yes")))\n    else:\n        cache.ram.initialize()\n        cache.disk.initialize()\n\n        form = FORM(\n            P(TAG.BUTTON(\n                T("Clear CACHE?"), _type="submit", _name="yes", _value="yes")),\n            P(TAG.BUTTON(\n                T("Clear RAM"), _type="submit", _name="ram", _value="ram")),\n            P(TAG.BUTTON(\n                T("Clear DISK"), _type="submit", _name="disk", _value="disk")),\n        )\n\n    if form.accepts(request.vars, session):\n        session.flash = ""\n        if is_gae:\n            if request.vars.yes:\n                cache.ram.clear()\n                session.flash += T("Cache Cleared")\n        else:\n            clear_ram = False\n            clear_disk = False\n            if request.vars.yes:\n                clear_ram = clear_disk = True\n            if request.vars.ram:\n                clear_ram = True\n            if request.vars.disk:\n                clear_disk = True\n            if clear_ram:\n                cache.ram.clear()\n                session.flash += T("Ram Cleared")\n            if clear_disk:\n                cache.disk.clear()\n                session.flash += T("Disk Cleared")\n        redirect(URL(r=request))\n\n    try:\n        from guppy import hpy\n        hp = hpy()\n    except ImportError:\n        hp = False\n\n    import shelve\n    import os\n    import copy\n    import time\n    import math\n    from gluon import portalocker\n\n    ram = {\n        \'entries\': 0,\n        \'bytes\': 0,\n        \'objects\': 0,\n        \'hits\': 0,\n        \'misses\': 0,\n        \'ratio\': 0,\n        \'oldest\': time.time(),\n        \'keys\': []\n    }\n    \n    disk = copy.copy(ram)\n    total = copy.copy(ram)\n    disk[\'keys\'] = []\n    total[\'keys\'] = []\n\n    def GetInHMS(seconds):\n        hours = math.floor(seconds / 3600)\n        seconds -= hours * 3600\n        minutes = math.floor(seconds / 60)\n        seconds -= minutes * 60\n        seconds = math.floor(seconds)\n\n        return (hours, minutes, seconds)\n\n    if is_gae:\n        gae_stats = cache.ram.client.get_stats()\n        try:\n            gae_stats[\'ratio\'] = ((gae_stats[\'hits\'] * 100) /\n                (gae_stats[\'hits\'] + gae_stats[\'misses\']))\n        except ZeroDivisionError:\n            gae_stats[\'ratio\'] = T("?")\n        gae_stats[\'oldest\'] = GetInHMS(time.time() - gae_stats[\'oldest_item_age\'])\n        total.update(gae_stats)\n    else:\n        # get ram stats directly from the cache object\n        ram_stats = cache.ram.stats[request.application]\n        ram[\'hits\'] = ram_stats[\'hit_total\'] - ram_stats[\'misses\']\n        ram[\'misses\'] = ram_stats[\'misses\']\n        try:\n            ram[\'ratio\'] = ram[\'hits\'] * 100 / ram_stats[\'hit_total\']\n        except (KeyError, ZeroDivisionError):\n            ram[\'ratio\'] = 0\n\n        for key, value in cache.ram.storage.iteritems():\n            if hp:\n                ram[\'bytes\'] += hp.iso(value[1]).size\n                ram[\'objects\'] += hp.iso(value[1]).count\n            ram[\'entries\'] += 1\n            if value[0] < ram[\'oldest\']:\n                ram[\'oldest\'] = value[0]\n            ram[\'keys\'].append((key, GetInHMS(time.time() - value[0])))\n\n        for key in cache.disk.storage:\n            value = cache.disk.storage[key]\n            if isinstance(value[1], dict):\n                disk[\'hits\'] = value[1][\'hit_total\'] - value[1][\'misses\']\n                disk[\'misses\'] = value[1][\'misses\']\n                try:\n                    disk[\'ratio\'] = disk[\'hits\'] * 100 / value[1][\'hit_total\']\n                except (KeyError, ZeroDivisionError):\n                    disk[\'ratio\'] = 0\n            else:\n                if hp:\n                    disk[\'bytes\'] += hp.iso(value[1]).size\n                    disk[\'objects\'] += hp.iso(value[1]).count\n                disk[\'entries\'] += 1\n                if value[0] < disk[\'oldest\']:\n                    disk[\'oldest\'] = value[0]\n                disk[\'keys\'].append((key, GetInHMS(time.time() - value[0])))\n\n        ram_keys = ram.keys() # [\'hits\', \'objects\', \'ratio\', \'entries\', \'keys\', \'oldest\', \'bytes\', \'misses\']\n        ram_keys.remove(\'ratio\')\n        ram_keys.remove(\'oldest\')\n        for key in ram_keys:\n            total[key] = ram[key] + disk[key]\n\n        try:\n            total[\'ratio\'] = total[\'hits\'] * 100 / (total[\'hits\'] +\n                                                total[\'misses\'])\n        except (KeyError, ZeroDivisionError):\n            total[\'ratio\'] = 0\n\n        if disk[\'oldest\'] < ram[\'oldest\']:\n            total[\'oldest\'] = disk[\'oldest\']\n        else:\n            total[\'oldest\'] = ram[\'oldest\']\n\n        ram[\'oldest\'] = GetInHMS(time.time() - ram[\'oldest\'])\n        disk[\'oldest\'] = GetInHMS(time.time() - disk[\'oldest\'])\n        total[\'oldest\'] = GetInHMS(time.time() - total[\'oldest\'])\n\n    def key_table(keys):\n        return TABLE(\n            TR(TD(B(T(\'Key\'))), TD(B(T(\'Time in Cache (h:m:s)\')))),\n            *[TR(TD(k[0]), TD(\'%02d:%02d:%02d\' % k[1])) for k in keys],\n            **dict(_class=\'cache-keys\',\n                   _style="border-collapse: separate; border-spacing: .5em;"))\n\n    if not is_gae:\n        ram[\'keys\'] = key_table(ram[\'keys\'])\n        disk[\'keys\'] = key_table(disk[\'keys\'])\n        total[\'keys\'] = key_table(total[\'keys\'])\n\n    return dict(form=form, total=total,\n                ram=ram, disk=disk, object_stats=hp != False)\n\n\ndef table_template(table):\n    from gluon.html import TR, TD, TABLE, TAG\n\n    def FONT(*args, **kwargs):\n        return TAG.font(*args, **kwargs)\n\n    def types(field):\n        f_type = field.type\n        if not isinstance(f_type,str):\n            return \' \'\n        elif f_type == \'string\':\n            return field.length\n        elif f_type == \'id\':\n            return B(\'pk\')\n        elif f_type.startswith(\'reference\') or \\\n                f_type.startswith(\'list:reference\'):\n            return B(\'fk\')\n        else:\n            return \' \'\n\n    # This is horribe HTML but the only one graphiz understands\n    rows = []\n    cellpadding = 4\n    color = "#000000"\n    bgcolor = "#FFFFFF"\n    face = "Helvetica"\n    face_bold = "Helvetica Bold"\n    border = 0\n\n    rows.append(TR(TD(FONT(table, _face=face_bold, _color=bgcolor),\n                           _colspan=3, _cellpadding=cellpadding,\n                           _align="center", _bgcolor=color)))\n    for row in db[table]:\n        rows.append(TR(TD(FONT(row.name, _color=color, _face=face_bold),\n                              _align="left", _cellpadding=cellpadding,\n                              _border=border),\n                       TD(FONT(row.type, _color=color, _face=face),\n                               _align="left", _cellpadding=cellpadding,\n                               _border=border),\n                       TD(FONT(types(row), _color=color, _face=face),\n                               _align="center", _cellpadding=cellpadding,\n                               _border=border)))\n    return "< %s >" % TABLE(*rows, **dict(_bgcolor=bgcolor, _border=1,\n                                          _cellborder=0, _cellspacing=0)\n                             ).xml()\n\n\ndef bg_graph_model():\n    graph = pgv.AGraph(layout=\'dot\',  directed=True,  strict=False,  rankdir=\'LR\')\n\n    subgraphs = dict()\n    for tablename in db.tables:\n        if hasattr(db[tablename],\'_meta_graphmodel\'):\n            meta_graphmodel = db[tablename]._meta_graphmodel\n        else:\n            meta_graphmodel = dict(group=request.application, color=\'#ECECEC\')\n\n        group = meta_graphmodel[\'group\'].replace(\' \', \'\')\n        if group not in subgraphs:\n            subgraphs[group] = dict(meta=meta_graphmodel, tables=[])\n        subgraphs[group][\'tables\'].append(tablename)\n\n        graph.add_node(tablename, name=tablename, shape=\'plaintext\',\n                       label=table_template(tablename))\n\n    for n, key in enumerate(subgraphs.iterkeys()):\n        graph.subgraph(nbunch=subgraphs[key][\'tables\'],\n                    name=\'cluster%d\' % n,\n                    style=\'filled\',\n                    color=subgraphs[key][\'meta\'][\'color\'],\n                    label=subgraphs[key][\'meta\'][\'group\'])\n\n    for tablename in db.tables:\n        for field in db[tablename]:\n            f_type = field.type\n            if isinstance(f_type,str) and (\n                f_type.startswith(\'reference\') or\n                f_type.startswith(\'list:reference\')):\n                referenced_table = f_type.split()[1].split(\'.\')[0]\n                n1 = graph.get_node(tablename)\n                n2 = graph.get_node(referenced_table)\n                graph.add_edge(n1, n2, color="#4C4C4C", label=\'\')\n\n    graph.layout()\n    if not request.args:\n        response.headers[\'Content-Type\'] = \'image/png\'\n        return graph.draw(format=\'png\', prog=\'dot\')\n    else:\n        response.headers[\'Content-Disposition\']=\'attachment;filename=graph.%s\'%request.args(0)\n        if request.args(0) == \'dot\':\n            return graph.string()\n        else:\n            return graph.draw(format=request.args(0), prog=\'dot\')\n\ndef graph_model():\n    return dict(databases=databases, pgv=pgv)\n\ndef manage():\n    tables = manager_action[\'tables\']\n    if isinstance(tables[0], str):\n        db = manager_action.get(\'db\', auth.db)\n        db = globals()[db] if isinstance(db, str) else db\n        tables = [db[table] for table in tables]\n    if request.args(0) == \'auth\':\n        auth.table_user()._plural = T(\'Users\')\n        auth.table_group()._plural = T(\'Roles\')\n        auth.table_membership()._plural = T(\'Memberships\')\n        auth.table_permission()._plural = T(\'Permissions\')\n    if request.extension != \'load\':\n        return dict(heading=manager_action.get(\'heading\',\n                    T(\'Manage %(action)s\') % dict(action=request.args(0).replace(\'_\', \' \').title())),\n                    tablenames=[table._tablename for table in tables],\n                    labels=[table._plural.title() for table in tables])\n\n    table = tables[request.args(1, cast=int)]\n    formname = \'%s_grid\' % table._tablename\n    linked_tables = orderby = None\n    if request.args(0) == \'auth\':\n        auth.table_group()._id.readable = \\\n        auth.table_membership()._id.readable = \\\n        auth.table_permission()._id.readable = False\n        auth.table_membership().user_id.label = T(\'User\')\n        auth.table_membership().group_id.label = T(\'Role\')\n        auth.table_permission().group_id.label = T(\'Role\')\n        auth.table_permission().name.label = T(\'Permission\')\n        if table == auth.table_user():\n            linked_tables=[auth.settings.table_membership_name]\n        elif table == auth.table_group():\n            orderby = \'role\' if not request.args(3) or \'.group_id\' not in request.args(3) else None\n        elif table == auth.table_permission():\n            orderby = \'group_id\'\n    kwargs = dict(user_signature=True, maxtextlength=1000,\n                  orderby=orderby, linked_tables=linked_tables)\n    smartgrid_args = manager_action.get(\'smartgrid_args\', {})\n    kwargs.update(**smartgrid_args.get(\'DEFAULT\', {}))\n    kwargs.update(**smartgrid_args.get(table._tablename, {}))\n    grid = SQLFORM.smartgrid(table, args=request.args[:2], formname=formname, **kwargs)\n    return grid\n\ndef hooks():\n    import functools\n    import inspect\n    list_op=[\'_%s_%s\' %(h,m) for h in [\'before\', \'after\'] for m in [\'insert\',\'update\',\'delete\']]\n    tables=[]\n    with_build_it=False\n    for db_str in sorted(databases):\n        db = databases[db_str]\n        for t in db.tables:\n            method_hooks=[]\n            for op in list_op:\n                functions = []\n                for f in getattr(db[t], op):\n                    if hasattr(f, \'__call__\'):\n                        try:\n                            if isinstance(f, (functools.partial)):\n                                f = f.func\n                            filename = inspect.getsourcefile(f)\n                            details = {\'funcname\':f.__name__,\n                                       \'filename\':filename[len(request.folder):] if request.folder in filename else None,\n                                       \'lineno\': inspect.getsourcelines(f)[1]}\n                            if details[\'filename\']: # Built in functions as delete_uploaded_files are not editable\n                                details[\'url\'] = URL(a=\'admin\',c=\'default\',f=\'edit\', args=[request[\'application\'], details[\'filename\']],vars={\'lineno\':details[\'lineno\']})\n                            if details[\'filename\'] or with_build_it:\n                                functions.append(details)\n                        # compiled app and windows build don\'t support code inspection\n                        except:\n                            pass\n                if len(functions):\n                    method_hooks.append({\'name\':op, \'functions\':functions})\n            if len(method_hooks):\n                tables.append({\'name\':"%s.%s" % (db_str,t), \'slug\': IS_SLUG()("%s.%s" % (db_str,t))[0], \'method_hooks\':method_hooks})\n    # Render\n    ul_main = UL(_class=\'nav nav-list\')\n    for t in tables:\n        ul_main.append(A(t[\'name\'], _onclick="collapse(\'a_%s\')" % t[\'slug\']))\n        ul_t = UL(_class=\'nav nav-list\', _id="a_%s" % t[\'slug\'], _style=\'display:none\')\n        for op in t[\'method_hooks\']:\n            ul_t.append(LI (op[\'name\']))\n            ul_t.append(UL([LI(A(f[\'funcname\'], _class="editor_filelink", _href=f[\'url\']if \'url\' in f else None, **{\'_data-lineno\':f[\'lineno\']-1})) for f in op[\'functions\']]))\n        ul_main.append(ul_t)\n    return ul_main\n\nresponse._vars=response._caller(insert)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/simran/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/simran/web2py/applications/QUIZES_OVERLOADED/controllers/appadmin.py", line 703, in <module>\n  File "/home/simran/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/simran/web2py/applications/QUIZES_OVERLOADED/controllers/appadmin.py", line 151, in insert\n    if form.accepts(request.vars, session):\n  File "/home/simran/web2py/gluon/sqlhtml.py", line 1746, in accepts\n    self.vars.id = self.table.insert(**fields)\n  File "/home/simran/web2py/gluon/packages/dal/pydal/objects.py", line 726, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/simran/web2py/gluon/packages/dal/pydal/adapters/base.py", line 746, in insert\n    raise e\nIntegrityError: FOREIGN KEY constraint failed\n'
p11
s.