(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Rows' object has no attribute 'answer_a'"
p3
sS'layer'
p4
S'/home/simran/web2py/applications/QUIZES_OVERLOADED/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    rows=db().select(db.titles.ALL,orderby=db.titles.title_name)\n    return dict(rows=rows)\n@auth.requires_login()\ndef show():\n    value = request.vars.value\n    rows = db(db.upload_question.title == value).select(db.upload_question.ALL)\n    for row in rows:\n        print type(row.id)\n        print type(auth.user_id)\n        print row.id\n        print auth.user_id\n        #db.executesql("INSERT INTO checking (question_id,current_user) VALUES (\'%d\',\'%d\')" % (row.id,auth.user_id))\n        db.executesql("INSERT INTO checking (question_id,current_user,answer_a,answer_b,answer_c,answer_d,title) VALUES (\'{0}\',\'{1}\',\'False\',\'False\',\'False\',\'False\',\'{2}\')" .format(row.id,auth.user_id,value))\n    b = auth.user_id\n    print "id",b\n    return dict(rows=rows,value=value,b=b)\ndef show1():\n    a = request.vars.id1\n    b = request.vars.id2\n    print "a",a\n    print "b",b\n    db(db.checking.question_id == a).update(answer_a = \'True\')\n\n\ndef show2():\n    a = request.vars.id1\n    b = request.vars.id2\n    print "a",a\n    print "b",b\n    db(db.checking.question_id == a).update(answer_b = \'True\')\ndef show3():\n    a = request.vars.id1\n    b = request.vars.id2\n    print "a",a\n    print "b",b\n    db(db.checking.question_id == a).update(answer_c = \'True\')\ndef show4():\n    a = request.vars.id1\n    b = request.vars.id2\n    print "a",a\n    print "b",b\n    db(db.checking.question_id == a).update(answer_d = \'True\')\n\ndef finish():\n    value=request.args(0)\n    print "value",value\n    user=request.args(1)\n    print "user",user\n    rows = db((db.checking.title == value) & (db.checking.current_user == user)).select(db.checking.ALL)\n    slct = db().select(db.upload_question.ALL)\n    print rows\n    val = 0\n    for row in rows:\n        print "id" , row.id\n        choose = db(db.upload_question.id == row.question_id).select(db.upload_question.ALL)\n        if (row.answer_a == slct.answer_a and row.answer_b == slct.answer_b and row.answer_c == slct.answer_c and row.answer_d == slct.answer_d ):\n            val = val + 10\n    print val\n\n\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(finish)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/simran/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/simran/web2py/applications/QUIZES_OVERLOADED/controllers/default.py", line 119, in <module>\n  File "/home/simran/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/simran/web2py/applications/QUIZES_OVERLOADED/controllers/default.py", line 74, in finish\n    if (row.answer_a == slct.answer_a and row.answer_b == slct.answer_b and row.answer_c == slct.answer_c and row.answer_d == slct.answer_d ):\nAttributeError: \'Rows\' object has no attribute \'answer_a\'\n'
p11
s.